/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/*                                                                           */
/*                  This file is part of the program and library             */
/*         SCIP --- Solving Constraint Integer Programs                      */
/*                                                                           */
/*    Copyright (C) 2002-2016 Konrad-Zuse-Zentrum                            */
/*                            fuer Informationstechnik Berlin                */
/*                                                                           */
/*  SCIP is distributed under the terms of the ZIB Academic License.         */
/*                                                                           */
/*  You should have received a copy of the ZIB Academic License              */
/*  along with SCIP; see the file COPYING. If not email to scip@zib.de.      */
/*                                                                           */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

/**@file   heur_myheuristic.c
 * @brief  myheuristic primal heuristic
 * @author Tobias Achterberg
 */

/*---+----1----+----2----+----3----+----4----+----5----+----6----+----7----+----8----+----9----+----0----+----1----+----2*/

#include <assert.h>

#include "heur_myheuristic.h"
#include "probdata_dssp.h"


#define HEUR_NAME             "myheuristic"
#define HEUR_DESC             "primal heuristic template"
#define HEUR_DISPCHAR         '?'
#define HEUR_PRIORITY         0
#define HEUR_FREQ             0     //Heuristica chamada apenas no nó raiz
#define HEUR_FREQOFS          0     //Heuristica chamada apenas no nó raiz
#define HEUR_MAXDEPTH         -1    //Sem limite
#define HEUR_TIMING           SCIP_HEURTIMING_AFTERNODE
#define HEUR_USESSUBSCIP      FALSE  /**< does the heuristic use a secondary SCIP instance? */


/*
 * Data structures
 */

/* TODO: fill in the necessary primal heuristic data */

/** primal heuristic data */
struct SCIP_HeurData
{
};


/*
 * Local methods
 */

/* put your local methods here, and declare them static */


/*
 * Callback methods of primal heuristic
 */

/* TODO: Implement all necessary primal heuristic methods. The methods with an #if 0 ... #else #define ... are optional */

/** copy method for primal heuristic plugins (called when SCIP copies plugins) */
#if 0
static
SCIP_DECL_HEURCOPY(heurCopymyheuristic)
{  /*lint --e{715}*/
   SCIPerrorMessage("method of myheuristic primal heuristic not implemented yet\n");
   SCIPABORT(); /*lint --e{527}*/

   return SCIP_OKAY;
}
#else
#define heurCopymyheuristic NULL
#endif

/** destructor of primal heuristic to free user data (called when SCIP is exiting) */
#if 0
static
SCIP_DECL_HEURFREE(heurFreemyheuristic)
{  /*lint --e{715}*/
   SCIPerrorMessage("method of myheuristic primal heuristic not implemented yet\n");
   SCIPABORT(); /*lint --e{527}*/

   return SCIP_OKAY;
}
#else
#define heurFreemyheuristic NULL
#endif


/** initialization method of primal heuristic (called after problem was transformed) */
#if 0
static
SCIP_DECL_HEURINIT(heurInitmyheuristic)
{  /*lint --e{715}*/
   SCIPerrorMessage("method of myheuristic primal heuristic not implemented yet\n");
   SCIPABORT(); /*lint --e{527}*/

   return SCIP_OKAY;
}
#else
#define heurInitmyheuristic NULL
#endif


/** deinitialization method of primal heuristic (called before transformed problem is freed) */
#if 0
static
SCIP_DECL_HEUREXIT(heurExitmyheuristic)
{  /*lint --e{715}*/
   SCIPerrorMessage("method of myheuristic primal heuristic not implemented yet\n");
   SCIPABORT(); /*lint --e{527}*/

   return SCIP_OKAY;
}
#else
#define heurExitmyheuristic NULL
#endif


/** solving process initialization method of primal heuristic (called when branch and bound process is about to begin) */
#if 0
static
SCIP_DECL_HEURINITSOL(heurInitsolmyheuristic)
{  /*lint --e{715}*/
   SCIPerrorMessage("method of myheuristic primal heuristic not implemented yet\n");
   SCIPABORT(); /*lint --e{527}*/

   return SCIP_OKAY;
}
#else
#define heurInitsolmyheuristic NULL
#endif


/** solving process deinitialization method of primal heuristic (called before branch and bound process data is freed) */
#if 0
static
SCIP_DECL_HEUREXITSOL(heurExitsolmyheuristic)
{  /*lint --e{715}*/
   SCIPerrorMessage("method of myheuristic primal heuristic not implemented yet\n");
   SCIPABORT(); /*lint --e{527}*/

   return SCIP_OKAY;
}
#else
#define heurExitsolmyheuristic NULL
#endif


/** execution method of primal heuristic */
static
SCIP_DECL_HEUREXEC(heurExecmyheuristic)
{  /*lint --e{715}*/
   // Conta variaveis inteiras e fracionarias

   assert(scip != NULL);
   SCIP_PROBDATA *probdata = SCIPgetProbData(scip);
   assert(probdata != NULL);

   int nvars = SCIPprobdataGetNVars(probdata);
   SCIP_VAR **vars = SCIPprobdataGetVars(probdata);

   int totalFrac = 0;
   for(int i = 0; i < nvars; i++) {
      SCIP_Real solval = SCIPgetVarSol(scip, vars[i]);
      if(!SCIPisFeasIntegral(scip, solval)) {
         totalFrac++;
      }
#ifdef BCPA
      else {
            SCIP_CALL(SCIPaddVarLocks(scip, vars[i], solval, solval));
            //SCIP_CALL(SCIPchgVarUbGlobal(scip, vars[i], 0.1));
            //SCIP_CALL(SCIPchgVarLbGlobal(scip, vars[i], 0.1));
      }
#endif   
   }
   printf("%d;%d;", totalFrac, nvars - totalFrac);
   // SCIPerrorMessage("method of myheuristic primal heuristic not implemented yet\n");
   // SCIPABORT(); /*lint --e{527}*/

   return SCIP_OKAY;
}


/*
 * primal heuristic specific interface methods
 */

/** creates the myheuristic primal heuristic and includes it in SCIP */
SCIP_RETCODE SCIPincludeHeurmyheuristic(
   SCIP*                scip                /**< SCIP data structure */
   )
{
   SCIP_HEURDATA* heurdata;
   SCIP_HEUR* heur;

   /* create myheuristic primal heuristic data */
   heurdata = NULL;

   heur = NULL;

   /* include primal heuristic */
#if 0
   /* use SCIPincludeHeur() if you want to set all callbacks explicitly and realize (by getting compiler errors) when
    * new callbacks are added in future SCIP versions
    */
   SCIP_CALL( SCIPincludeHeur(scip, HEUR_NAME, HEUR_DESC, HEUR_DISPCHAR, HEUR_PRIORITY, HEUR_FREQ, HEUR_FREQOFS,
         HEUR_MAXDEPTH, HEUR_TIMING, HEUR_USESSUBSCIP,
         heurCopymyheuristic, heurFreemyheuristic, heurInitmyheuristic, heurExitmyheuristic, heurInitsolmyheuristic, heurExitsolmyheuristic, heurExecmyheuristic,
         heurdata) );
#else
   /* use SCIPincludeHeurBasic() plus setter functions if you want to set callbacks one-by-one and your code should
    * compile independent of new callbacks being added in future SCIP versions
    */
   SCIP_CALL( SCIPincludeHeurBasic(scip, &heur,
         HEUR_NAME, HEUR_DESC, HEUR_DISPCHAR, HEUR_PRIORITY, HEUR_FREQ, HEUR_FREQOFS,
         HEUR_MAXDEPTH, HEUR_TIMING, HEUR_USESSUBSCIP, heurExecmyheuristic, heurdata) );

   assert(heur != NULL);

   /* set non fundamental callbacks via setter functions */
   SCIP_CALL( SCIPsetHeurCopy(scip, heur, heurCopymyheuristic) );
   SCIP_CALL( SCIPsetHeurFree(scip, heur, heurFreemyheuristic) );
   SCIP_CALL( SCIPsetHeurInit(scip, heur, heurInitmyheuristic) );
   SCIP_CALL( SCIPsetHeurExit(scip, heur, heurExitmyheuristic) );
   SCIP_CALL( SCIPsetHeurInitsol(scip, heur, heurInitsolmyheuristic) );
   SCIP_CALL( SCIPsetHeurExitsol(scip, heur, heurExitsolmyheuristic) );
#endif

   /* add myheuristic primal heuristic parameters */
   /* TODO: (optional) add primal heuristic specific parameters with SCIPaddTypeParam() here */

   return SCIP_OKAY;
}
